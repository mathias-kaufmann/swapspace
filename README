==========================================
swapspace - dynamic swap manager for Linux
==========================================

See also
========

Home page:

    http://pqxx.org/development/swapspace/

You'll find a manual under "doc" in the source tree.  Read it with:

    man -l doc/swapspace.8


What it does for you
====================

This is a system daemon for the Linux kernel that eliminates the need for large,
fixed swap partitions.

Usually when you install a GNU/Linux system, it sets up a swap partition on
disk.  The swap partition serves as virtual memory, so you may need a lot of it.
But you can't store data there, so you don't want to sacrifice too much disk
space.  And it's not always easy, or safe, to change its size afterwards!

Runnin swapspace solves that problem.  You no longer need a large swap
partition.  You can even do without the whole thing.  The program manages swap
files for you.  These work just like partitions, except they're normal files.
You can add more when you need them, or delete some when you want the disk space
back.  And that is exactly what swapspace does.  It constantly monitors your
system's virtual-memory needs and manages a pool of swap files accordingly.

With swapspace you can install GNU/Linux in one single big partition, without
regrets later about picking the wrong size.  Your system can handle the
occasional memory-intensive task, without eating up disk space that you'll never
get back.

Swapspace is made available for use under the GNU General Public License (GPL).
See the file COPYING for an open copyright license.

Copyright (C) 2005, 2006 Software Industry Promotion Agency (SIPA), Thailand.
Copyright (C) 2010, 2012 Jeroen T. Vermeulen.
Written by Jeroen T. Vermeulen.


How it compares
===============

There are similar programs out there, such as dynswapd and the older swapd
(which is more portable).  They had some shortcomings that swapspace avoids.

First thing is robustness.  Swap managers go to work when the system is short on
memory and perversely, they usually start using more memory when they go to
work.  If there isn't enough available memory, at best they can't help and at
worst they crash.  That's why swapspace does not allocate any additional memory
once it's started up.  It doesn't grab a lot of memory on startup either; the
difference is mostly a matter of different program design.

Next, swapspace aims to be user-friendly.  No configuration is needed.  The
daemon tries to figure out what's needed at runtime.  It balances your memory
needs against disk usage.  It also tries to minimize time lost to writing new
swap files.  There are knobs you can twiddle, but they're mostly for
experimentation and development.

There's one twist to other swap managers: swapspace adapts the sizes of the
swap files it creates.  The Linux kernel may limit the total number of swap
files, but as you need more, the daemon will create larger and larger ones.
That way, creating your first swap file only takes a few seconds and won't slow
down your system much.  As you need more virtual memory, it will start to take
longer but also give you more space--so it happens less often.

The swapspace daemon has been in production use for several months on various
32-bit architectures before it was first released to the public, and has been
tested with swapfiles larger than can be addressed in 32 bits.

Swapspace is a small program: about 50 kilobytes on my system--or even less in a
special version that only accepts the most basic configuration options and
ignores its configuration file.  It also needs very little memory for itself.


When not to use it
==================

In its current form, swapspace is probably not a good choice for systems that
need to remain responsive at all times.  Depending on the system and the
cicrumstances, the creation a large new swapfile can take as long as half a
minute and occupy quite a lot of the system's attention.  The program minimizes
the impact, but it wouldn't be very useful if it never created any swapfiles at
all!

The slowdown happens in operating-system code, so there isn't much we can do
about it.  It would help if the kernel were able to extend a swap file that's
already in use.  But that is of course the price you pay for virtual memory:
slower but cheaper.  If your system is too slow because there's not enough
memory, the ultimate answer is still: try to use less or buy more!


Where to start
==============

The program is available both as a source archive and as a Debian package built
from that same source archive.  But use the package from your system
distribution if there is one.

To build and install from source, enter the main swapspace source directory and
run "make".  Some editing of the Makefile may be required if your C compiler is
not gcc.  The program code is written in standard C99 (the 1999 edition of the C
standard), plus one POSIX extension.  The easiest mode of installation is by
running "make install" with root privileges--but again, if your system
distribution provides a package, it's better to use that instead.

See the manpage for details on how to run swapspace for troubleshooting or
debugging purposes.  A sample configuration file is also provided, but it's safe
to ignore.  There's also an init script to start and stop swapspace as a regular
system service, but your system distribution may need things done differently.

The "make install" procedure installs the init script in /etc/init.d, but does
not currently ensure that swapspace is run on system startup.


Technical details
=================

Installation
------------

The installation procedure creates a directory /var/lib/swapspace, which must be
accessible to the system's superuser (root) only; granting any kind of access
for this directory to an untrusted user constitutes a serious security hole.

According to the Filesystem Hierarchy Standard, other appropriate places for
this kind of file might be /var/tmp or /var/run.  The former was not deemed
appropriate because it is accessible to all users, and the latter because it's
meant for very small files.

Files in /var/lib survive reboots whereas those in /var/tmp and /var/run need
not.  Obviously any data in swap files can be safely erased on reboot--it may
arguably be safer.  But keeping your swap files across reboots means you spend
less time waiting for swap files that you also needed the last time you used
your computer.


Algorithm
---------

Choices of allocation and deallocation are driven by a "finite state machine"
consisting of four states: steady, hungry, overfed, and diet.  The program will
move between these states as circumstances dictate, and apply different policies
depending on the current state.  This is how swapspace manages its tradeoffs
between the desire to free up unused swap space on the one hand, and on the
other, the desire to minimize deallocation and re-allocation (or "thrashing") of
swap files.

For those interested, here is a quick description of these states and their
associated policies:

Steady - normal operation; no additional swap space is needed, nor do we have
more than is needed.  However, the program can go into the hungry or overfed
states depending on memory usage.

Hungry - more swap space was recently allocated.  The program is willing to
allocate even more if needed, but to avoid thrashing, it's not going to drop
swap files.  If the system does not need more swap files for a certain period of
time, the program reverts to the steady state.

Overfed - significantly more virtual memory is available than is needed.  If
this situation persists for a certain timeout period, the program deallocates
one of its swap files and returns to the steady state.  If there's still too
much swap space, the program may come straight back to this state.

Diet - a recent allocation attempt has run into resource limits, e.g. because
the filesystem used for swap files was full.  No more swapspace can be allocated
but excess files can be freed up very rapidly.  Afer timeout, reverts to steady.

State information can be queried by sending the program the SIGUSR1 signal (see
"man 7 signal" to get the number for your architecture) which will cause it to
log debug information to the system's daemon log and/or standard output, as
appropriate.  The program can also be made to log state transitions by starting
it with the -v or --verbose option.

